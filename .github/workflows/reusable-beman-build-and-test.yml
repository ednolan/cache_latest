# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: 'Beman build-and-test matrix'
on:
  workflow_call:
    inputs:
      matrix_config:
        description: 'JSON specification of tests to run'
        type: string
        required: true
jobs:
  configure_test_matrix:
    name: Configure test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        shell: python
        run: |
          import json
          import os
          import sys

          input_data = json.loads('''${{inputs.matrix_config}}''')
          output_list = []

          image_prefix = "ghcr.io/bemanproject/infra-containers-"
          for compiler, compiler_tests in input_data.items():
              for compiler_test in compiler_tests:
                  for version in compiler_test["versions"]:
                      image = None
                      if compiler == "gcc" or compiler.startswith("clang"):
                          image = image_prefix + compiler + ":" + version
                      for versions_test in compiler_test["tests"]:
                          for cxxversion in versions_test["cxxversions"]:
                              for cxxversion_test in versions_test["tests"]:
                                  for stdlib in cxxversion_test["stdlibs"]:
                                      for stdlib_test in cxxversion_test["tests"]:
                                          test = {
                                              "compiler": compiler,
                                              "version": version,
                                              "cxxversion": cxxversion,
                                              "stdlib": stdlib,
                                              "test": stdlib_test
                                          }
                                          if image is not None:
                                              test["image"] = image
                                          output_list.append(test)
          json_string = json.dumps(output_list)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as output_file:
              print(f"matrix={json_string}", file=output_file)
  test_matrix:
    needs: configure_test_matrix
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.configure_test_matrix.outputs.matrix) }}
    name: "${{ matrix.config.compiler }} ${{ matrix.config.version }} ${{ matrix.config.cxxversion }} ${{ matrix.config.stdlib }} ${{ matrix.config.test }}"
    runs-on: >-
      ${{ (matrix.config.compiler == 'gcc' || startsWith(matrix.config.compiler, 'clang')) && 'ubuntu-latest'
          || (matrix.config.compiler == 'appleclang' && 'macos-latest')
          || (matrix.config.compiler == 'msvc' && 'windows-latest') }}
    container: ${{ matrix.config.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Setup MSVC
        if: matrix.config.compiler == 'msvc'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64
      - name: Setup Macos
        if: matrix.config.compiler == 'appleclang'
        shell: bash
        run: sudo chmod -R 777 /opt/
      - name: Print installed software
        shell: bash
        run: |
          echo "Build system:"
          cmake --version
          ninja --version
      - name: Process configuration
        id: vars
        shell: bash
        run: |
          cxxversion=${{ matrix.config.cxxversion }}
          echo "cpp_version=${cxxversion#c++}" >> "$GITHUB_OUTPUT"
          case ${{ matrix.config.compiler }} in
            gcc) echo "toolchain_file=infra/cmake/gnu-toolchain.cmake" >> "$GITHUB_OUTPUT" ;;
            clang*)
              case ${{ matrix.config.stdlib }} in
                libstdc++)
                  echo "toolchain_file=infra/cmake/llvm-toolchain.cmake" >> "$GITHUB_OUTPUT" ;;
                libc++)
                  echo "toolchain_file=infra/cmake/llvm-libc++-toolchain.cmake" >> "$GITHUB_OUTPUT" ;;
              esac ;;
            appleclang)
              echo "toolchain_file=infra/cmake/appleclang-toolchain.cmake" >> "$GITHUB_OUTPUT" ;;
            msvc)
              echo "toolchain_file=infra/cmake/msvc-toolchain.cmake" >> "$GITHUB_OUTPUT" ;;
          esac
          test=${{ matrix.config.test }}
          echo "build_config=${test%%[.]*}" >> "$GITHUB_OUTPUT"
          test_type=${test##*[.]}
          echo "test_type=$test_type" >> "$GITHUB_OUTPUT"
          case $test_type in
            Default) ;;
            TSan)
              echo "cmake_extra_args=-DBEMAN_BUILDSYS_SANITIZER=TSan" >> "$GITHUB_OUTPUT" ;;
            MaxSan)
              echo "cmake_extra_args=-DBEMAN_BUILDSYS_SANITIZER=MaxSan" >> "$GITHUB_OUTPUT" ;;
            Werror)
              echo "cmake_extra_args=-DCMAKE_CXX_FLAGS='-Werror=all -Werror=extra'" >> "$GITHUB_OUTPUT" ;;
            Dynamic)
              echo "cmake_extra_args=-DBUILD_SHARED_LIBS=on" >> "$GITHUB_OUTPUT" ;;
            Coverage)
              echo "cmake_extra_args=-DCMAKE_CXX_FLAGS='-fno-default-inline -fno-inline --coverage -fprofile-abs-path'" >> "$GITHUB_OUTPUT";;
            *)
              echo "cmake_extra_args=$test_type" >> "$GITHUB_OUTPUT" ;;
          esac
      - name: Print parameters
        shell: bash
        run: |
          echo ${{ matrix.config.compiler }} ${{ matrix.config.cxxversion }} ${{ matrix.config.stdlib }} ${{ matrix.config.test }}
          echo ${{ steps.vars.outputs.cpp_version }} ${{ steps.vars.outputs.toolchain_file }} ${{ steps.vars.outputs.cmake_extra_args }} ${{ steps.vars.outputs.build_config }}
      - name: Configure CMake
        shell: bash
        run: |
          cmake \
            -B build \
            -S . \
            -DCMAKE_CXX_STANDARD=${{ steps.vars.outputs.cpp_version }} \
            -DCMAKE_TOOLCHAIN_FILE="${{ steps.vars.outputs.toolchain_file }}" \
            -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES="./infra/cmake/use-fetch-content.cmake" \
            ${{ steps.vars.outputs.cmake_extra_args }}
        env:
          CMAKE_GENERATOR: "Ninja Multi-Config"
      - name: Build
        shell: bash
        run: |
          cmake --build build --config ${{ steps.vars.outputs.build_config }} --parallel --verbose
          cmake --build build --config ${{ steps.vars.outputs.build_config }} --target all_verify_interface_header_sets
          cmake --install build --config ${{ steps.vars.outputs.build_config }} --prefix /opt/beman.package
          ls -R /opt/beman.package
      - name: Test
        shell: bash
        run: ctest --test-dir build --build-config ${{ steps.vars.outputs.build_config }} --output-on-failure
      - name: Generate Coverage Files
        if: steps.vars.outputs.test_type == 'Coverage'
        shell: bash
        run: |
          cat > gcovr.cfg <<EOF
          root = $GITHUB_WORKSPACE
          gcov-executable = gcov
          exclude = $GITHUB_WORKSPACE/build/.*
          exclude = $GITHUB_WORKSPACE/examples/.*
          exclude = $GITHUB_WORKSPACE/tests/.*
          coveralls = $GITHUB_WORKSPACE/coverage.json
          coveralls-pretty = yes
          EOF
          git config --global --add safe.directory $GITHUB_WORKSPACE
          gcovr --verbose --config gcovr.cfg .
          cat coverage.json
      - name: Upload Coverage Data to Coveralls
        if: steps.vars.outputs.test_type == 'Coverage'
        uses: coverallsapp/github-action@main
        with:
          file: coverage.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
